{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst addRandomBomb = table => {\n  const newTable = [...table];\n  let bombCount = 0;\n  while (bombCount < 38) {\n    const randomRow = Math.floor(Math.random() * 15 + 1);\n    const randowColumn = Math.floor(Math.random() * 15 + 1);\n    if (!newTable[randomRow][randowColumn].isBomb) {\n      newTable[randomRow][randowColumn].isBomb = true;\n      bombCount++;\n    }\n  }\n  return newTable;\n};\nconst addTableNumbers = table => {\n  const newTable = [...table];\n  for (let i = 0; i < 16; i++) {\n    for (let y = 0; y < 16; y++) {\n      if (newTable[i][y].isBomb) continue;\n      if (y < newTable[i].length - 1 && newTable[i][y + 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (y < newTable[i].length - 1 && i < newTable.length - 1 && newTable[i + 1][y + 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (i < newTable.length - 1 && newTable[i + 1][y].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (i < newTable.length - 1 && y > 0 && newTable[i + 1][y - 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (y > 0 && newTable[i][y - 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (y > 0 && i > 0 && newTable[i - 1][y - 1] && newTable[i - 1][y - 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (i > 0 && newTable[i - 1][y] && newTable[i - 1][y].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (i > 0 && y < newTable[i].length - 1 && newTable[i - 1][y + 1] && newTable[i - 1][y + 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n    }\n  }\n  return newTable;\n};\nconst getEmptyGameTable = () => {\n  const result = [];\n  for (let i = 0; i < 16; i++) {\n    const row = [];\n    for (let y = 0; y < 16; y++) {\n      row.push({\n        row: i,\n        column: y,\n        isBomb: false,\n        isOpen: false,\n        isFinished: false,\n        number: 0,\n        status: 'default'\n      });\n    }\n    result.push(row);\n  }\n  return result;\n};\nconst cellsSlice = createSlice({\n  name: 'cells',\n  initialState: {\n    cellsList: []\n  },\n  reducers: {\n    generateCellsList: state => {\n      let result = getEmptyGameTable();\n      result = addRandomBomb(result);\n      state.cellsList = addTableNumbers(result);\n    },\n    changeCellStatus: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.cellsList[payload.row][payload.column] = {\n        ...state.cellsList[payload.row][payload.column],\n        status: payload.status === 'default' ? 'flag' : payload.status === 'flag' ? 'question' : 'default'\n      };\n      console.log(state.cellsList[payload.row][payload.column].status);\n    },\n    openCell(state, _ref2) {\n      let {\n        payload\n      } = _ref2;\n      if (state.cellsList[payload.row][payload.column].isBomb) {\n        state.cellsList[payload.row][payload.column].isFinished = true;\n        state.cellsList.forEach(row => {\n          row.forEach(cell => {\n            if (cell.isBomb) {\n              cell.isOpen = true;\n            }\n          });\n        });\n      } else {\n        state.cellsList[payload.row][payload.column].isOpen = true;\n        if (!state.cellsList[payload.row][payload.column].number) {\n          const checkSquareToBottom = (row, column) => {\n            if (column < 15) {\n              const rightCell = state.cellsList[row][column + 1];\n              rightCell.isOpen = true;\n              if (!rightCell.number) {\n                checkSquareToBottom(row, column + 1);\n              }\n            }\n            if (column < 15 && row < 15) {\n              const bottomRigthCell = state.cellsList[row + 1][column + 1];\n              bottomRigthCell.isOpen = true;\n              if (!bottomRigthCell.number) {\n                checkSquareToBottom(row + 1, column + 1);\n              }\n            }\n            if (row < 15) {\n              const bottomCell = state.cellsList[row + 1][column];\n              bottomCell.isOpen = true;\n              if (!bottomCell.number) {\n                checkSquareToBottom(row + 1, column);\n              }\n            }\n            if (row < 15 && column > 0) {\n              const bottomLeftCell = state.cellsList[row + 1][column - 1];\n              bottomLeftCell.isOpen = true;\n              if (!bottomLeftCell.number) {\n                checkSquareToBottom(row + 1, column - 1);\n              }\n            }\n            if (column > 0) {\n              const leftCell = state.cellsList[row][column - 1];\n              if (leftCell.isOpen) return;\n              leftCell.isOpen = true;\n              if (!leftCell.number) {\n                checkSquareToBottom(row, column - 1);\n              }\n            }\n          };\n          const checkSquareToTop = (row, column) => {\n            console.log(row, column, 'square');\n            if (row > 0 && column > 0) {\n              const topLeftCell = state.cellsList[row - 1][column - 1];\n              if (topLeftCell.isOpen) return;\n              console.log(topLeftCell.number, 'topleft');\n              topLeftCell.isOpen = true;\n              if (!topLeftCell.number) {\n                checkSquareToTop(row - 1, column - 1);\n              }\n            }\n            if (row > 0) {\n              const topCell = state.cellsList[row - 1][column];\n              console.log(topCell.number, 'top');\n              topCell.isOpen = true;\n              if (!topCell.number) {\n                checkSquareToTop(row - 1, column);\n              }\n            }\n            if (row > 0 && column < 15) {\n              const topRightCell = state.cellsList[row - 1][column + 1];\n              if (topRightCell.isOpen) return;\n              topRightCell.isOpen = true;\n              if (!topRightCell.number) {\n                checkSquareToTop(row - 1, column + 1);\n              }\n            }\n            if (column < 15) {\n              const rightCell = state.cellsList[row][column + 1];\n              console.log(rightCell.number, 'right');\n              rightCell.isOpen = true;\n              if (!rightCell.number) {\n                checkSquareToTop(row, column + 1);\n              }\n            }\n            if (column > 0) {\n              const leftCell = state.cellsList[row][column - 1];\n              if (leftCell.isOpen) return;\n              leftCell.isOpen = true;\n              if (!leftCell.number) {\n                checkSquareToTop(row, column - 1);\n              }\n            }\n          };\n          checkSquareToBottom(payload.row, payload.column);\n          checkSquareToTop(payload.row, payload.column);\n        }\n      }\n    }\n  }\n});\nexport default cellsSlice.reducer;\nexport const {\n  generateCellsList,\n  changeCellStatus,\n  openCell\n} = cellsSlice.actions;","map":{"version":3,"names":["createSlice","addRandomBomb","table","newTable","bombCount","randomRow","Math","floor","random","randowColumn","isBomb","addTableNumbers","i","y","length","number","getEmptyGameTable","result","row","push","column","isOpen","isFinished","status","cellsSlice","name","initialState","cellsList","reducers","generateCellsList","state","changeCellStatus","_ref","payload","console","log","openCell","_ref2","forEach","cell","checkSquareToBottom","rightCell","bottomRigthCell","bottomCell","bottomLeftCell","leftCell","checkSquareToTop","topLeftCell","topCell","topRightCell","reducer","actions"],"sources":["D:/saper/src/store/slices/cellsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst addRandomBomb = (table) => {\n  const newTable = [...table]\n  \n  let bombCount = 0\n  while(bombCount < 38) {\n    const randomRow = Math.floor(Math.random() * 15 + 1);\n    const randowColumn = Math.floor(Math.random() * 15 + 1);\n    if(!newTable[randomRow][randowColumn].isBomb) {\n      newTable[randomRow][randowColumn].isBomb = true\n      bombCount++\n    }\n  }\n  \n  return newTable\n}\n\nconst addTableNumbers = (table) => {\n  const newTable = [...table]\n  for(let i = 0; i < 16; i++) {\n    for(let y = 0; y < 16; y++) {\n      if(newTable[i][y].isBomb) continue\n      \n      if(y < newTable[i].length - 1 &&  newTable[i][y + 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(y < newTable[i].length - 1 && i < newTable.length - 1 && newTable[i + 1][y + 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(i < newTable.length - 1 && newTable[i + 1][y].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(i < newTable.length - 1 && y > 0 && newTable[i + 1][y - 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(y > 0 && newTable[i][y - 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(y > 0 && i > 0 && newTable[i - 1][y - 1] && newTable[i - 1][y - 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(i > 0 && newTable[i - 1][y] && newTable[i - 1][y].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(i > 0 && y < newTable[i].length - 1 && newTable[i - 1][y + 1] && newTable[i - 1][y + 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n    }\n  }\n  return newTable\n}\nconst getEmptyGameTable = () => {\n  const result = []\n  for(let i = 0; i < 16; i++) {\n    const row = []\n    for(let y = 0; y < 16; y++) {\n      row.push({\n        row: i,\n        column: y,\n        isBomb: false,\n        isOpen: false,\n        isFinished: false,\n        number: 0,\n        status: 'default'\n      })\n    }\n    result.push(row)\n  }\n  return result\n}\nconst cellsSlice = createSlice({\n  name: 'cells',\n  initialState: {\n    cellsList: []\n  },\n  reducers: {\n    generateCellsList: (state) => {\n      let result = getEmptyGameTable()\n      result = addRandomBomb(result)\n      state.cellsList = addTableNumbers(result)\n    },\n    changeCellStatus: (state, {payload}) => {\n      state.cellsList[payload.row][payload.column] = {\n        ...state.cellsList[payload.row][payload.column],\n        status: payload.status === 'default' ? 'flag' : payload.status === 'flag' ? 'question' : 'default'\n      }\n      console.log(state.cellsList[payload.row][payload.column].status)\n    },\n    openCell(state, {payload}) {\n      if(state.cellsList[payload.row][payload.column].isBomb) {\n        state.cellsList[payload.row][payload.column].isFinished = true\n        state.cellsList.forEach(row => {\n          row.forEach(cell => {\n            if(cell.isBomb) {\n              cell.isOpen = true\n            }\n          })\n        })\n      } else {\n        state.cellsList[payload.row][payload.column].isOpen = true\n        if(!state.cellsList[payload.row][payload.column].number) {\n          const checkSquareToBottom = (row, column) => {\n              if(column < 15) {\n                const rightCell = state.cellsList[row][column + 1]\n                rightCell.isOpen = true\n                if(!rightCell.number) {\n                  checkSquareToBottom(row, column + 1)\n                }\n              }\n              if(column < 15 && row < 15) {\n                const bottomRigthCell = state.cellsList[row + 1][column + 1]\n                bottomRigthCell.isOpen = true\n                if(!bottomRigthCell.number) {\n                  checkSquareToBottom(row + 1, column + 1)\n                }\n              }\n              if(row < 15) {\n                const bottomCell = state.cellsList[row + 1][column]\n                bottomCell.isOpen = true\n                if(!bottomCell.number) {\n                  checkSquareToBottom(row + 1, column)\n                }\n              }\n              if(row < 15 && column > 0) {\n                const bottomLeftCell = state.cellsList[row + 1][column - 1]\n                bottomLeftCell.isOpen = true\n                if(!bottomLeftCell.number) {\n                  checkSquareToBottom(row + 1, column - 1)\n                }\n              }\n              if(column > 0) {\n                const leftCell = state.cellsList[row][column - 1]\n                if(leftCell.isOpen) return \n                leftCell.isOpen = true\n                if(!leftCell.number) {\n                  checkSquareToBottom(row, column - 1)\n                }\n              }\n            }\n            \n            const checkSquareToTop = (row, column) => {\n              console.log(row, column, 'square')\n              if(row > 0 && column > 0) {\n                const topLeftCell = state.cellsList[row - 1][column - 1]\n                if(topLeftCell.isOpen) return\n                console.log(topLeftCell.number, 'topleft')\n                topLeftCell.isOpen = true\n                if(!topLeftCell.number) {\n                  checkSquareToTop(row - 1, column - 1)\n                }\n              }\n              if(row > 0) {\n                const topCell = state.cellsList[row - 1][column]\n                console.log(topCell.number, 'top')\n                topCell.isOpen = true\n                if(!topCell.number) {\n                  checkSquareToTop(row - 1, column)\n                }\n              }\n              if(row > 0 && column < 15) {\n                const topRightCell = state.cellsList[row - 1][column + 1]\n                if(topRightCell.isOpen) return\n                topRightCell.isOpen = true\n                if(!topRightCell.number) {\n                  checkSquareToTop(row - 1, column + 1)\n                }\n              }\n              if(column < 15) {\n                const rightCell = state.cellsList[row][column + 1]\n                console.log(rightCell.number, 'right')\n                rightCell.isOpen = true\n                if(!rightCell.number) {\n                  checkSquareToTop(row, column + 1)\n                }\n              }\n              if(column > 0) {\n                const leftCell = state.cellsList[row][column - 1]\n                if(leftCell.isOpen) return \n                leftCell.isOpen = true\n                if(!leftCell.number) {\n                  checkSquareToTop(row, column - 1)\n                }\n              }\n            }\n            checkSquareToBottom(payload.row, payload.column)\n            checkSquareToTop(payload.row, payload.column)\n            }\n      }\n    }\n  }\n})\n\nexport default cellsSlice.reducer\nexport const { generateCellsList, changeCellStatus, openCell } = cellsSlice.actions\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}