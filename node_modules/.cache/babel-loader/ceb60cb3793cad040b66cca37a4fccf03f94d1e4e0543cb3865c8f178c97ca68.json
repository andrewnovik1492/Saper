{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst addRandomBomb = table => {\n  const newTable = [...table];\n  let bombCount = 0;\n  while (bombCount < 38) {\n    const randomRow = Math.floor(Math.random() * 15 + 1);\n    const randowColumn = Math.floor(Math.random() * 15 + 1);\n    if (!newTable[randomRow][randowColumn].isBomb) {\n      newTable[randomRow][randowColumn].isBomb = true;\n      bombCount++;\n    }\n  }\n  return newTable;\n};\nconst addTableNumbers = table => {\n  const newTable = [...table];\n  for (let i = 0; i < 16; i++) {\n    for (let y = 0; y < 16; y++) {\n      if (newTable[i][y].isBomb) continue;\n      if (y < newTable[i].length - 1 && newTable[i][y + 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (y < newTable[i].length - 1 && i < newTable.length - 1 && newTable[i + 1][y + 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (i < newTable.length - 1 && newTable[i + 1][y].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (i < newTable.length - 1 && y > 0 && newTable[i + 1][y - 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (y > 0 && newTable[i][y - 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (y > 0 && i > 0 && newTable[i - 1][y - 1] && newTable[i - 1][y - 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (i > 0 && newTable[i - 1][y] && newTable[i - 1][y].isBomb) {\n        newTable[i][y].number += 1;\n      }\n      if (i > 0 && y < newTable[i].length - 1 && newTable[i - 1][y + 1] && newTable[i - 1][y + 1].isBomb) {\n        newTable[i][y].number += 1;\n      }\n    }\n  }\n  return newTable;\n};\nconst getEmptyGameTable = () => {\n  const result = [];\n  for (let i = 0; i < 16; i++) {\n    const row = [];\n    for (let y = 0; y < 16; y++) {\n      row.push({\n        row: i,\n        column: y,\n        isBomb: false,\n        isOpen: false,\n        isFinished: false,\n        number: 0,\n        status: 'default'\n      });\n    }\n    result.push(row);\n  }\n  return result;\n};\nconst cellsSlice = createSlice({\n  name: 'cells',\n  initialState: {\n    cellsList: []\n  },\n  reducers: {\n    generateCellsList: state => {\n      let result = getEmptyGameTable();\n      result = addRandomBomb(result);\n      state.cellsList = addTableNumbers(result);\n    },\n    changeCellStatus: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.cellsList[payload.row][payload.column] = {\n        ...state.cellsList[payload.row][payload.column],\n        status: payload.status === 'default' ? 'flag' : payload.status === 'flag' ? 'question' : 'default'\n      };\n      console.log(state.cellsList[payload.row][payload.column].status);\n    },\n    openCell(state, _ref2) {\n      let {\n        payload\n      } = _ref2;\n      if (state.cellsList[payload.row][payload.column].isBomb) {\n        state.cellsList[payload.row][payload.column].isFinished = true;\n        state.cellsList.forEach(row => {\n          row.forEach(cell => {\n            if (cell.isBomb) {\n              cell.isOpen = true;\n            }\n          });\n        });\n      } else {\n        state.cellsList[payload.row][payload.column].isOpen = true;\n        if (!state.cellsList[payload.row][payload.column].number) {}\n      }\n    }\n  }\n});\nexport default cellsSlice.reducer;\nexport const {\n  generateCellsList,\n  changeCellStatus,\n  openCell\n} = cellsSlice.actions;","map":{"version":3,"names":["createSlice","addRandomBomb","table","newTable","bombCount","randomRow","Math","floor","random","randowColumn","isBomb","addTableNumbers","i","y","length","number","getEmptyGameTable","result","row","push","column","isOpen","isFinished","status","cellsSlice","name","initialState","cellsList","reducers","generateCellsList","state","changeCellStatus","_ref","payload","console","log","openCell","_ref2","forEach","cell","reducer","actions"],"sources":["D:/saper/src/store/slices/cellsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst addRandomBomb = (table) => {\n  const newTable = [...table]\n  \n  let bombCount = 0\n  while(bombCount < 38) {\n    const randomRow = Math.floor(Math.random() * 15 + 1);\n    const randowColumn = Math.floor(Math.random() * 15 + 1);\n    if(!newTable[randomRow][randowColumn].isBomb) {\n      newTable[randomRow][randowColumn].isBomb = true\n      bombCount++\n    }\n  }\n  \n  return newTable\n}\n\nconst addTableNumbers = (table) => {\n  const newTable = [...table]\n  for(let i = 0; i < 16; i++) {\n    for(let y = 0; y < 16; y++) {\n      if(newTable[i][y].isBomb) continue\n      \n      if(y < newTable[i].length - 1 &&  newTable[i][y + 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(y < newTable[i].length - 1 && i < newTable.length - 1 && newTable[i + 1][y + 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(i < newTable.length - 1 && newTable[i + 1][y].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(i < newTable.length - 1 && y > 0 && newTable[i + 1][y - 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(y > 0 && newTable[i][y - 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(y > 0 && i > 0 && newTable[i - 1][y - 1] && newTable[i - 1][y - 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(i > 0 && newTable[i - 1][y] && newTable[i - 1][y].isBomb) {\n        newTable[i][y].number += 1\n      }\n      if(i > 0 && y < newTable[i].length - 1 && newTable[i - 1][y + 1] && newTable[i - 1][y + 1].isBomb) {\n        newTable[i][y].number += 1\n      }\n    }\n  }\n  return newTable\n}\nconst getEmptyGameTable = () => {\n  const result = []\n  for(let i = 0; i < 16; i++) {\n    const row = []\n    for(let y = 0; y < 16; y++) {\n      row.push({\n        row: i,\n        column: y,\n        isBomb: false,\n        isOpen: false,\n        isFinished: false,\n        number: 0,\n        status: 'default'\n      })\n    }\n    result.push(row)\n  }\n  return result\n}\nconst cellsSlice = createSlice({\n  name: 'cells',\n  initialState: {\n    cellsList: []\n  },\n  reducers: {\n    generateCellsList: (state) => {\n      let result = getEmptyGameTable()\n      result = addRandomBomb(result)\n      state.cellsList = addTableNumbers(result)\n    },\n    changeCellStatus: (state, {payload}) => {\n      state.cellsList[payload.row][payload.column] = {\n        ...state.cellsList[payload.row][payload.column],\n        status: payload.status === 'default' ? 'flag' : payload.status === 'flag' ? 'question' : 'default'\n      }\n      console.log(state.cellsList[payload.row][payload.column].status)\n    },\n    openCell(state, {payload}) {\n      if(state.cellsList[payload.row][payload.column].isBomb) {\n        state.cellsList[payload.row][payload.column].isFinished = true\n        state.cellsList.forEach(row => {\n          row.forEach(cell => {\n            if(cell.isBomb) {\n              cell.isOpen = true\n            }\n          })\n        })\n      } else {\n        state.cellsList[payload.row][payload.column].isOpen = true\n        if(!state.cellsList[payload.row][payload.column].number) {\n          \n            }\n      }\n    }\n  }\n})\n\nexport default cellsSlice.reducer\nexport const { generateCellsList, changeCellStatus, openCell } = cellsSlice.actions\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}