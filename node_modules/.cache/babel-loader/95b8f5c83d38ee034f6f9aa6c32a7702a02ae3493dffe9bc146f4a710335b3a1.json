{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { generateTable, isCellBorderBomb } from \"../../helpers/table\";\nconst configurationSlice = createSlice({\n  name: 'configuration',\n  initialState: {\n    status: 'progress'\n  },\n  reducers: {\n    changeGameStatus: (state, status) => {\n      state.status = status;\n    },\n    startGame: state => {\n      state.status = 'progress';\n      state.cellsList = generateTable();\n    },\n    changeCellStatus: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.cellsList[payload.row][payload.column] = {\n        ...state.cellsList[payload.row][payload.column],\n        status: payload.status === 'default' ? 'flag' : payload.status === 'flag' ? 'question' : 'default'\n      };\n    },\n    openCell(state, _ref2) {\n      let {\n        payload\n      } = _ref2;\n      if (state.cellsList[payload.row][payload.column].isBomb) {\n        state.cellsList[payload.row][payload.column].isFinished = true;\n        state.cellsList.forEach(row => {\n          row.forEach(cell => {\n            if (cell.isBomb) {\n              cell.isOpen = true;\n              state.status = 'lose';\n            }\n          });\n        });\n      } else {\n        state.cellsList[payload.row][payload.column].isOpen = true;\n        if (!state.cellsList[payload.row][payload.column].number) {\n          const openColumn = (row, column) => {\n            let currentRow = row;\n            while (currentRow >= 0) {\n              const currentCell = state.cellsList[currentRow][column];\n              currentCell.isOpen = true;\n              if (isCellBorderBomb(currentCell, state.cellsList)) {\n                break;\n              }\n              currentRow--;\n            }\n            currentRow = row;\n            while (currentRow <= 15) {\n              const currentCell = state.cellsList[currentRow][column];\n              currentCell.isOpen = true;\n              if (isCellBorderBomb(currentCell, state.cellsList)) {\n                break;\n              }\n              currentRow++;\n            }\n          };\n          let currentColumn = payload.column;\n          while (currentColumn <= 15) {\n            openColumn(payload.row, currentColumn);\n            if (state.cellsList[payload.row][currentColumn].number) {\n              break;\n            }\n            currentColumn++;\n          }\n          // currentColumn = payload.column\n          // while(currentColumn >= 0) {\n          //   openColumn(payload.row, currentColumn)\n          //   if(state.cellsList[payload.row][currentColumn].number) {\n          //     break\n          //   }\n          //   currentColumn--\n          // }\n        }\n      }\n    }\n  }\n});\n\nexport default configurationSlice.reducer;\nexport const {\n  changeCellStatus,\n  openCell,\n  changeGameStatus,\n  startGame\n} = configurationSlice.actions;\n\n// const checkSquareToBottom = (row, column) => {\n//   if(column < 15) {\n//     const rightCell = state.cellsList[row][column + 1]\n//     rightCell.isOpen = true\n//     if(!rightCell.number) {\n//       checkSquareToBottom(row, column + 1)\n//     }\n//   }\n//   if(column < 15 && row < 15) {\n//     const bottomRigthCell = state.cellsList[row + 1][column + 1]\n//     bottomRigthCell.isOpen = true\n//     if(!bottomRigthCell.number) {\n//       checkSquareToBottom(row + 1, column + 1)\n//     }\n//   }\n//   if(row < 15) {\n//     const bottomCell = state.cellsList[row + 1][column]\n//     bottomCell.isOpen = true\n//     if(!bottomCell.number) {\n//       checkSquareToBottom(row + 1, column)\n//     }\n//   }\n//   if(row < 15 && column > 0) {\n//     const bottomLeftCell = state.cellsList[row + 1][column - 1]\n//     bottomLeftCell.isOpen = true\n//     if(!bottomLeftCell.number) {\n//       checkSquareToBottom(row + 1, column - 1)\n//     }\n//   }\n//   if(column > 0) {\n//     const leftCell = state.cellsList[row][column - 1]\n//     if(leftCell.isOpen) return \n//     leftCell.isOpen = true\n//     if(!leftCell.number) {\n//       checkSquareToBottom(row, column - 1)\n//     }\n//   }\n// }\n\n// const checkSquareToTop = (row, column) => {\n//   console.log(row, column, 'square')\n//   if(row > 0 && column > 0) {\n//     const topLeftCell = state.cellsList[row - 1][column - 1]\n//     if(topLeftCell.isOpen) return\n//     console.log(topLeftCell.number, 'topleft')\n//     topLeftCell.isOpen = true\n//     if(!topLeftCell.number) {\n//       checkSquareToTop(row - 1, column - 1)\n//     }\n//   }\n//   if(row > 0) {\n//     const topCell = state.cellsList[row - 1][column]\n//     console.log(topCell.number, 'top')\n//     topCell.isOpen = true\n//     if(!topCell.number) {\n//       checkSquareToTop(row - 1, column)\n//     }\n//   }\n//   if(row > 0 && column < 15) {\n//     const topRightCell = state.cellsList[row - 1][column + 1]\n//     if(topRightCell.isOpen) return\n//     topRightCell.isOpen = true\n//     if(!topRightCell.number) {\n//       checkSquareToTop(row - 1, column + 1)\n//     }\n//   }\n//   if(column < 15) {\n//     const rightCell = state.cellsList[row][column + 1]\n//     console.log(rightCell.number, 'right')\n//     rightCell.isOpen = true\n//     if(!rightCell.number) {\n//       checkSquareToTop(row, column + 1)\n//     }\n//   }\n//   if(column > 0) {\n//     const leftCell = state.cellsList[row][column - 1]\n//     if(leftCell.isOpen) return \n//     leftCell.isOpen = true\n//     if(!leftCell.number) {\n//       checkSquareToTop(row, column - 1)\n//     }\n//   }\n// }\n// checkSquareToBottom(payload.row, payload.column)\n// checkSquareToTop(payload.row, payload.column)","map":{"version":3,"names":["createSlice","generateTable","isCellBorderBomb","configurationSlice","name","initialState","status","reducers","changeGameStatus","state","startGame","cellsList","changeCellStatus","_ref","payload","row","column","openCell","_ref2","isBomb","isFinished","forEach","cell","isOpen","number","openColumn","currentRow","currentCell","currentColumn","reducer","actions"],"sources":["D:/saper/src/store/slices/configurationSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { generateTable, isCellBorderBomb } from \"../../helpers/table\";\n\nconst configurationSlice = createSlice({\n  name: 'configuration',\n  initialState: {\n    status: 'progress',\n  },\n  reducers: {\n    changeGameStatus: (state, status) => {\n      state.status = status\n    },\n    startGame: (state) => {\n      state.status = 'progress'\n      state.cellsList = generateTable()\n    },\n    changeCellStatus: (state, {payload}) => {\n      state.cellsList[payload.row][payload.column] = {\n        ...state.cellsList[payload.row][payload.column],\n        status: payload.status === 'default' ? 'flag' : payload.status === 'flag' ? 'question' : 'default'\n      }\n    },\n    openCell(state, {payload}) {\n      if(state.cellsList[payload.row][payload.column].isBomb) {\n        state.cellsList[payload.row][payload.column].isFinished = true\n        state.cellsList.forEach(row => {\n          row.forEach(cell => {\n            if(cell.isBomb) {\n              cell.isOpen = true\n              state.status = 'lose'\n            }\n          })\n        })\n      } else {\n        state.cellsList[payload.row][payload.column].isOpen = true\n        if(!state.cellsList[payload.row][payload.column].number) {\n          const openColumn = (row, column) => {\n            let currentRow = row\n            while(currentRow >= 0) {\n              const currentCell = state.cellsList[currentRow][column]\n              currentCell.isOpen = true\n              if(isCellBorderBomb(currentCell, state.cellsList)) {\n                break;\n              }\n              currentRow--\n            }\n            currentRow = row\n            while(currentRow <= 15) {\n              const currentCell = state.cellsList[currentRow][column]\n              currentCell.isOpen = true\n              if(isCellBorderBomb(currentCell, state.cellsList)) {\n                break;\n              }\n              currentRow++\n            }\n          }\n          let currentColumn = payload.column\n          while(currentColumn <= 15) {\n            openColumn(payload.row, currentColumn)\n            if(state.cellsList[payload.row][currentColumn].number) {\n              break\n            }\n            currentColumn++\n          }\n          // currentColumn = payload.column\n          // while(currentColumn >= 0) {\n          //   openColumn(payload.row, currentColumn)\n          //   if(state.cellsList[payload.row][currentColumn].number) {\n          //     break\n          //   }\n          //   currentColumn--\n          // }\n        }\n      }\n    }\n  }\n})\n\nexport default configurationSlice.reducer\n\nexport const {changeCellStatus, openCell, changeGameStatus, startGame} = configurationSlice.actions\n\n\n// const checkSquareToBottom = (row, column) => {\n//   if(column < 15) {\n//     const rightCell = state.cellsList[row][column + 1]\n//     rightCell.isOpen = true\n//     if(!rightCell.number) {\n//       checkSquareToBottom(row, column + 1)\n//     }\n//   }\n//   if(column < 15 && row < 15) {\n//     const bottomRigthCell = state.cellsList[row + 1][column + 1]\n//     bottomRigthCell.isOpen = true\n//     if(!bottomRigthCell.number) {\n//       checkSquareToBottom(row + 1, column + 1)\n//     }\n//   }\n//   if(row < 15) {\n//     const bottomCell = state.cellsList[row + 1][column]\n//     bottomCell.isOpen = true\n//     if(!bottomCell.number) {\n//       checkSquareToBottom(row + 1, column)\n//     }\n//   }\n//   if(row < 15 && column > 0) {\n//     const bottomLeftCell = state.cellsList[row + 1][column - 1]\n//     bottomLeftCell.isOpen = true\n//     if(!bottomLeftCell.number) {\n//       checkSquareToBottom(row + 1, column - 1)\n//     }\n//   }\n//   if(column > 0) {\n//     const leftCell = state.cellsList[row][column - 1]\n//     if(leftCell.isOpen) return \n//     leftCell.isOpen = true\n//     if(!leftCell.number) {\n//       checkSquareToBottom(row, column - 1)\n//     }\n//   }\n// }\n\n// const checkSquareToTop = (row, column) => {\n//   console.log(row, column, 'square')\n//   if(row > 0 && column > 0) {\n//     const topLeftCell = state.cellsList[row - 1][column - 1]\n//     if(topLeftCell.isOpen) return\n//     console.log(topLeftCell.number, 'topleft')\n//     topLeftCell.isOpen = true\n//     if(!topLeftCell.number) {\n//       checkSquareToTop(row - 1, column - 1)\n//     }\n//   }\n//   if(row > 0) {\n//     const topCell = state.cellsList[row - 1][column]\n//     console.log(topCell.number, 'top')\n//     topCell.isOpen = true\n//     if(!topCell.number) {\n//       checkSquareToTop(row - 1, column)\n//     }\n//   }\n//   if(row > 0 && column < 15) {\n//     const topRightCell = state.cellsList[row - 1][column + 1]\n//     if(topRightCell.isOpen) return\n//     topRightCell.isOpen = true\n//     if(!topRightCell.number) {\n//       checkSquareToTop(row - 1, column + 1)\n//     }\n//   }\n//   if(column < 15) {\n//     const rightCell = state.cellsList[row][column + 1]\n//     console.log(rightCell.number, 'right')\n//     rightCell.isOpen = true\n//     if(!rightCell.number) {\n//       checkSquareToTop(row, column + 1)\n//     }\n//   }\n//   if(column > 0) {\n//     const leftCell = state.cellsList[row][column - 1]\n//     if(leftCell.isOpen) return \n//     leftCell.isOpen = true\n//     if(!leftCell.number) {\n//       checkSquareToTop(row, column - 1)\n//     }\n//   }\n// }\n// checkSquareToBottom(payload.row, payload.column)\n// checkSquareToTop(payload.row, payload.column)\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,qBAAqB;AAErE,MAAMC,kBAAkB,GAAGH,WAAW,CAAC;EACrCI,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAE;IACZC,MAAM,EAAE;EACV,CAAC;EACDC,QAAQ,EAAE;IACRC,gBAAgB,EAAEA,CAACC,KAAK,EAAEH,MAAM,KAAK;MACnCG,KAAK,CAACH,MAAM,GAAGA,MAAM;IACvB,CAAC;IACDI,SAAS,EAAGD,KAAK,IAAK;MACpBA,KAAK,CAACH,MAAM,GAAG,UAAU;MACzBG,KAAK,CAACE,SAAS,GAAGV,aAAa,EAAE;IACnC,CAAC;IACDW,gBAAgB,EAAEA,CAACH,KAAK,EAAAI,IAAA,KAAgB;MAAA,IAAd;QAACC;MAAO,CAAC,GAAAD,IAAA;MACjCJ,KAAK,CAACE,SAAS,CAACG,OAAO,CAACC,GAAG,CAAC,CAACD,OAAO,CAACE,MAAM,CAAC,GAAG;QAC7C,GAAGP,KAAK,CAACE,SAAS,CAACG,OAAO,CAACC,GAAG,CAAC,CAACD,OAAO,CAACE,MAAM,CAAC;QAC/CV,MAAM,EAAEQ,OAAO,CAACR,MAAM,KAAK,SAAS,GAAG,MAAM,GAAGQ,OAAO,CAACR,MAAM,KAAK,MAAM,GAAG,UAAU,GAAG;MAC3F,CAAC;IACH,CAAC;IACDW,QAAQA,CAACR,KAAK,EAAAS,KAAA,EAAa;MAAA,IAAX;QAACJ;MAAO,CAAC,GAAAI,KAAA;MACvB,IAAGT,KAAK,CAACE,SAAS,CAACG,OAAO,CAACC,GAAG,CAAC,CAACD,OAAO,CAACE,MAAM,CAAC,CAACG,MAAM,EAAE;QACtDV,KAAK,CAACE,SAAS,CAACG,OAAO,CAACC,GAAG,CAAC,CAACD,OAAO,CAACE,MAAM,CAAC,CAACI,UAAU,GAAG,IAAI;QAC9DX,KAAK,CAACE,SAAS,CAACU,OAAO,CAACN,GAAG,IAAI;UAC7BA,GAAG,CAACM,OAAO,CAACC,IAAI,IAAI;YAClB,IAAGA,IAAI,CAACH,MAAM,EAAE;cACdG,IAAI,CAACC,MAAM,GAAG,IAAI;cAClBd,KAAK,CAACH,MAAM,GAAG,MAAM;YACvB;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,MAAM;QACLG,KAAK,CAACE,SAAS,CAACG,OAAO,CAACC,GAAG,CAAC,CAACD,OAAO,CAACE,MAAM,CAAC,CAACO,MAAM,GAAG,IAAI;QAC1D,IAAG,CAACd,KAAK,CAACE,SAAS,CAACG,OAAO,CAACC,GAAG,CAAC,CAACD,OAAO,CAACE,MAAM,CAAC,CAACQ,MAAM,EAAE;UACvD,MAAMC,UAAU,GAAGA,CAACV,GAAG,EAAEC,MAAM,KAAK;YAClC,IAAIU,UAAU,GAAGX,GAAG;YACpB,OAAMW,UAAU,IAAI,CAAC,EAAE;cACrB,MAAMC,WAAW,GAAGlB,KAAK,CAACE,SAAS,CAACe,UAAU,CAAC,CAACV,MAAM,CAAC;cACvDW,WAAW,CAACJ,MAAM,GAAG,IAAI;cACzB,IAAGrB,gBAAgB,CAACyB,WAAW,EAAElB,KAAK,CAACE,SAAS,CAAC,EAAE;gBACjD;cACF;cACAe,UAAU,EAAE;YACd;YACAA,UAAU,GAAGX,GAAG;YAChB,OAAMW,UAAU,IAAI,EAAE,EAAE;cACtB,MAAMC,WAAW,GAAGlB,KAAK,CAACE,SAAS,CAACe,UAAU,CAAC,CAACV,MAAM,CAAC;cACvDW,WAAW,CAACJ,MAAM,GAAG,IAAI;cACzB,IAAGrB,gBAAgB,CAACyB,WAAW,EAAElB,KAAK,CAACE,SAAS,CAAC,EAAE;gBACjD;cACF;cACAe,UAAU,EAAE;YACd;UACF,CAAC;UACD,IAAIE,aAAa,GAAGd,OAAO,CAACE,MAAM;UAClC,OAAMY,aAAa,IAAI,EAAE,EAAE;YACzBH,UAAU,CAACX,OAAO,CAACC,GAAG,EAAEa,aAAa,CAAC;YACtC,IAAGnB,KAAK,CAACE,SAAS,CAACG,OAAO,CAACC,GAAG,CAAC,CAACa,aAAa,CAAC,CAACJ,MAAM,EAAE;cACrD;YACF;YACAI,aAAa,EAAE;UACjB;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACF;MACF;IACF;EACF;AACF,CAAC,CAAC;;AAEF,eAAezB,kBAAkB,CAAC0B,OAAO;AAEzC,OAAO,MAAM;EAACjB,gBAAgB;EAAEK,QAAQ;EAAET,gBAAgB;EAAEE;AAAS,CAAC,GAAGP,kBAAkB,CAAC2B,OAAO;;AAGnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}